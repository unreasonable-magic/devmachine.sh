#!/usr/bin/env bash

eval "$(stdlib shellenv)"

stdlib::import "log"
log_init
if [[ "$DEBUG" == "true" ]]; then
  log_set_level "$LOG_LEVEL_DEBUG"
fi

stdlib::import "error"
stdlib::import "test"
stdlib::import "image"
stdlib::import "array"
stdlib::import "color"
stdlib::import "debugger"
stdlib::import "url/parse"
stdlib::import "url/join"
stdlib::import "source"

export DEVMACHINE_PATH=$(realpath "$(dirname "$0")/..")
stdlib::source "$DEVMACHINE_PATH/lib/devmachine.sh"

# This CLI can be run in either 2 "modes":
#
#   1. Action mode (running commands across all dev files on the system)
#   2. Devfile mode (running individual tasks inside a dev file)
#
# The way we can tell the difference between them is whether or not
# the first argument starts with a "+" or a "--"
#
if [[ "$#" -ge 1 ]]; then
  devfile_or_action="$1"

  if [[ ! "${devfile_or_action}" =~ ^(\+|\-\-) ]]; then
    devfile="$devfile_or_action"

    # Looks like we've been given a file! First thing we need to do is
    # see if it exists in it's current path, e.g:
    #
    #   $ devmachine my_file.sh
    #   $ devmachine file_in_some_folder.sh
    #   $ ./relative_file_with_shebang.sh
    #
    # If it is, then we can just use that as the path, otherwise we'll
    # make up a path using DEVFILES_PATH
    if ! stdlib::test::is_file "$devfile"; then
      devfile="$DEVFILES_PATH/${devfile%\.sh}.sh"

      if ! stdlib::test::exists "$devfile"; then
        stdlib::error::fatal "no devfile %s" "$devfile"
      fi
    fi

    # Now that we have our devfile, let's run it
    if [[ "$2" == "" ]]; then
      stdlib::source "$DEVMACHINE_PATH/cli/devfile.sh" "${devfile}"
    else
      # Provide a shortcut to devfiles to run a task from inside
      # itself
      @run() {
        ui::logfunc "@run" "$@"
        "$DEVMACHINE_PATH/bin/devmachine" "$devfile" "$@"
      }

      # Before we run anything inside the devfile, let's switch the working
      # directory so all OS calls are relative to the devfile, and not the
      # current location
      cd "$(dirname "$devfile")"
      stdlib::source "$devfile" "${@:2}"
    fi

    exit
  fi
fi

action="$1"
cli_path="$DEVMACHINE_PATH/cli"

case "$action" in
# Even though our syntax has + as a prefix for action, let's be nice
# and still support --help and --version
--help | "")
  stdlib::source "${cli_path}/help.sh"
  ;;
--version)
  stdlib::source "${cli_path}/version.sh"
  ;;

# You can technically run `devmachine +run installed configure`, but this just
# adds a bit of sugar so you can go directly to `devmachine +all`
+installed | +notinstalled | +all)
  stdlib::source "${cli_path}/run.sh" "${1:1}" "${@:2}"
  ;;

*)
  # Strip the "+" from the start and find the matching cli file
  action="${action:1}"
  cli_file="$DEVMACHINE_PATH/cli/${action}.sh"

  if stdlib::test::exists "$cli_file"; then
    stdlib::source "${cli_file}" "${@:2}"
  else
    stdlib::error::fatal "unknown command $action"
  fi
  ;;
esac
